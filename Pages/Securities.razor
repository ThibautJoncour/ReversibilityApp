@page "/securitization"
@using Newtonsoft.Json
@inject DatabaseService DatabaseService
@inject IJSRuntime JSRuntime

<style>
    body {
        font-family: Arial, sans-serif;
        background-color: #f4f4f9;
        margin: 0;
        padding: 20px;
    }

    .container {
        max-width: 1200px;
        margin: 0 auto;
    }

    .search-container {
        display: flex;
        justify-content: center;
        margin-bottom: 20px;
    }

    .search-container input {
        padding: 10px;
        width: 300px;
        border: 1px solid #ccc;
        border-radius: 5px;
    }

    .search-container button {
        margin-left: 10px;
        padding: 10px 15px;
        border: none;
        background-color: #007bff;
        color: white;
        border-radius: 5px;
        cursor: pointer;
        transition: background 0.3s ease;
    }

    .search-container button:hover {
        background-color: #0056b3;
    }

    .card-container {
        display: flex;
        gap: 1.5rem;
        justify-content: space-between;
        flex-wrap: wrap;
    }

    .card {
        flex: 1;
        min-width: 300px;
        border-radius: 12px;
        padding: 1.5rem;
        background: white;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s ease;
    }

    .card:hover {
        transform: translateY(-5px);
    }

    .card h3 {
        margin-bottom: 1rem;
        font-size: 1.5rem;
        color: #333;
    }

    .card table {
        width: 100%;
        border-collapse: collapse;
    }

    .card table th, .card table td {
        border: 1px solid #ddd;
        padding: 10px;
        text-align: left;
    }

    .card table th {
        background-color: #007bff;
        color: white;
        font-weight: bold;
    }

    .table-container {
        max-height: 300px;
        overflow-y: auto;
    }

    .no-data {
        color: #999;
        font-style: italic;
        text-align: center;
    }
</style>

<h3 class="text-center my-4 text-primary">Securities</h3>


<div class="container">
    <div class="search-container">
        <input @bind="SearchTerm" placeholder="Enter ISIN code..." />
        <button @onclick="ApplyFilter">Search</button>
    </div>

    <div class="card-container">
        <div class="card">
            <h3>Bonds Characteristics</h3>
            @if (FilteredData.Any())
            {
                    <table>
                        <thead>
                            <tr>
                                <th>Libellé</th>
                                <th>Values</th>
                            </tr>
                        </thead>
                        <tbody>
                        @foreach (var row in FilteredData.FirstOrDefault())
                        {
                                    <tr>
                                        <td>@row.Key</td>
                                        <td>@row.Value</td>
                                    </tr>
                        }
                        </tbody>
                    </table>
            }
            else
            {
                    <p class="no-data">Aucune donnée trouvée pour ce numéro d'historique.</p>
            }
        </div>

        <div class="card">
            <h3>Flux</h3>
            <div class="table-container">
                <table id="dataTable1" class="table table-striped">
                    <!-- Contenu généré dynamiquement -->
                </table>
            </div>
        </div>
    </div>
</div>

@code {
    private string SearchTerm = string.Empty;
    private string jsonaudit, jsonEch = string.Empty;
    private List<Dictionary<string, object>> FilteredData = new();
    private List<Dictionary<string, object>> FilteredEche = new();

    private async Task ApplyFilter()
    {
        string query = "SELECT * FROM securities WHERE [ISIN] = @Input";
        string query2 = "SELECT * FROM securitiesSchedule WHERE [ISIN] = @Input";
        var parameters = new Dictionary<string, object> { { "@Input", SearchTerm } };

        FilteredData = DatabaseService.GetData(query, parameters);
        FilteredEche = DatabaseService.GetData(query2, parameters);

        jsonEch = FilteredData.Any() ? JsonConvert.SerializeObject(FilteredData) : null;
        jsonaudit = FilteredEche.Any() ? JsonConvert.SerializeObject(FilteredEche) : null;

        await JSRuntime.InvokeVoidAsync("resetDataTable1");
        await JSRuntime.InvokeVoidAsync("resetDataTable");

        if (!string.IsNullOrEmpty(jsonEch))
        {
            await JSRuntime.InvokeVoidAsync("initializeDataTable1", jsonEch);
        }
        if (!string.IsNullOrEmpty(jsonaudit))
        {
            await JSRuntime.InvokeVoidAsync("initializeDataTable", jsonaudit);
        }
    }
}
